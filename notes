// Method : 


// grouping things together 
/ breaking things apart 

Scenario : 

steps 
1, making internet connection 
2, navigate to the amazon 
3, search for items 
4, add to the cart 
5, fill up payment info and pay 
6, receive confirmation in email 


methods that we know so far : 

main method : 
	special method that start and run your program

Scanner class methods : 
	next()
	nextX()...

String class methods 
	strObject.length() 
	strObject.subString(1,4)
	strObject.charAt(0)

Arrays class methods 
	Arrays.toString(arrobject)
	Arrays.sort(arrobject)
	

method observed : 

1, method without return value 

	*some methods only take action without returning/generating a new value so we can store 
		example : Arrays.sort(arr)

2, method with return value 

	*some methods take action and return a value so we can store 
		example :strObject.length()

3, method that does not take external data when being called 

	 strObject.length(); 
	 strObject.toUpperCase(); 
	 strObject.toLowerCase(); 
	 strObject.trim(); 
	 scanObject.next();

4, method that take external data when being called 
	 
	 strObject.charAt(10); 
	 Arrays.sort(arr);
	 strObject.indexOf("horse"); 
	 strObject.subString(1,3);
	 Arrays.copyOfRange(arr,1,4);

5, some methods need an object so we can call using that object 

	strObject.charAt(10);
	String.charAt(10) WRONG !!
	scanobject.next() ; 

6, some methods DOES NOT need an object to be called 

	Arrays.sort(arr) ; 
	Arrays.equals(arr1,arr2); 
	
	vasyl note day 41 
	Class it's a blueprint.

instance variables: variables that were created on the class level.
local variable: variable that is inside a method. Thus, it doesn't exists out of method.


instance variables or fields:
stands for defining properies| atributes| states of object.

How we can access instance fields?

Inside a same class any instance can access these variables.
Outside: create an object of this class in order to access instance variables.
Computer mac = new Computer();
(mac.OS = "", mac.type)

instance methods: 
we need them in order to define behavior of object
also we need methods in order to manipulate with instance variables
so how to access them?
Inside a same class: any instance method can call any other instance method

Outside a class: we need to create an object in order to call instance methods

//our custom class doesn't have a main method
//and we are not expecting to have main method in this class

//POJO API Testing 

//static methods

if we remove static keyword from the main method

Error: Main method is not static in class day41_2_evening_session.ACFactory, please define the main method as:
   public static void main(String[] args)

static methods belong to the class
//they are not instance methods

static means shared -> so any one who is using static memebrs, is using same methods/variables

how you are accessing variables/methods?

with instance memebers( variables , methods) we need object.instance member

with static methods: ClassName.methodName();

	
	